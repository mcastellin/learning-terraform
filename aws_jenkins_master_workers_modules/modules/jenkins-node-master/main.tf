terraform {
  required_version = ">=0.12.0"
  required_providers {
    aws = ">=3.0.0"
  }
}

locals {
  ssh_key_public_file = format("%s.pub", var.ssh_key_file)
}

# Retrieve from the SSM parameter the latest ami version ID
data "aws_ssm_parameter" "linuxAmi" {
  name = "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
}

# SSH Key generation to access EC2 instances
# generate keypair with `ssh-keygen -t rsa`

resource "aws_key_pair" "ssh-jenkins-master" {
  key_name   = "jenkins"
  public_key = file(local.ssh_key_public_file)
}

# Create AMIs
# NOTE: for ansible provisioners to work we need to have boto3 library installed
# in the node we use to run our terraform scripts
# pip3 install boto3 --user
resource "aws_instance" "jenkins-master" {
  ami                         = data.aws_ssm_parameter.linuxAmi.value
  instance_type               = var.instance_type
  key_name                    = aws_key_pair.ssh-jenkins-master.key_name
  associate_public_ip_address = true
  vpc_security_group_ids      = var.vpc_sec_group_ids
  subnet_id                   = var.subnet_id
  tags = {
    # the Name tag is important because we're going to use it
    # as a reference for the dynamic Ansible store
    "Name" = "jenkins_master_tf"
  }

  # depends-on is unnecessary since this module is already wired with the outputs generated by the peered-vpc module

  provisioner "local-exec" {
    command = <<EOF
    aws --profile ${var.aws_profile} ec2 wait instance-status-ok --region ${var.region} --instance-ids ${self.id}
    ansible-playbook --extra-vars 'passed_in_hosts=tag_Name_${self.tags.Name}' ansible_templates/jenkins_master.yaml
    EOF
  }
}